from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import calendar

import pytz

def get_admin_panel_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–µ–∫—Å—Ç—ã‚úèÔ∏è", callback_data="admin_texts"),
            InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏üìó", callback_data="admin_users"),
            InlineKeyboardButton(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüîî", callback_data="admin_notifications")
        ]
    ])
    return keyboard

def get_back_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def get_answer_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer"),
            InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")
        ]
    ])
    return keyboard

def get_only_answer_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answer")
        ]
    ])
    return keyboard

def get_text_navigation_keyboard(page, total_pages, text_fields):
    start_idx = (page - 1) * 3
    end_idx = start_idx + 3
    keyboard_buttons = [
        InlineKeyboardButton(text=field, callback_data=f"text_{field}_{page}") for field in text_fields[start_idx:end_idx]
    ]

    rows = [keyboard_buttons[i:i + 3] for i in range(0, len(keyboard_buttons), 3)]

    navigation_row = [
        InlineKeyboardButton(text="<<", callback_data=f"prev_page_{page}") if page > 1 else InlineKeyboardButton(text=" ", callback_data="ignore"),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"),
        InlineKeyboardButton(text=">>", callback_data=f"next_page_{page}") if page < total_pages else InlineKeyboardButton(text=" ", callback_data="ignore")
    ]
    
    rows.append(navigation_row)
    return InlineKeyboardMarkup(inline_keyboard=rows)

def get_user_navigation_keyboard(page, total_pages):
    navigation_row = [
        InlineKeyboardButton(text="<<", callback_data=f"prev_page_{page}") if page > 1 else InlineKeyboardButton(text=" ", callback_data="ignore"),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"),
        InlineKeyboardButton(text=">>", callback_data=f"next_page_{page}") if page < total_pages else InlineKeyboardButton(text=" ", callback_data="ignore")
    ]

    search_row = [
        InlineKeyboardButton(text="–ü–æ–∏—Å–∫ üîé", callback_data="search_user"),
        InlineKeyboardButton(text="ZIP üìÅ", callback_data="download_zip")
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[navigation_row, search_row])
    return keyboard

def get_user_search_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∏—Å–∫ üîé", callback_data="search_user")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

def get_admin_notification_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í—ã–∫–ª üü•", callback_data="disable_admin_notification"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"),
            InlineKeyboardButton(text="–í–∫–ª üü©", callback_data="enable_admin_notification")
        ]
    ])
    return keyboard

def get_admin_notify_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="24 —á–∞—Å–∞", callback_data="notify_24"),
            InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="notify_tomorrow"),
            InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="notify_data")
        ]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def create_calendar(year: int, month: int, user_id: int):
    # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    month_names = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    
    # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024 -> 24)
    short_year = year % 100
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
    inline_kb = []
    
    # –®–∞–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    header_buttons = [
        InlineKeyboardButton(text='<', callback_data=f'prev_{year}_{month}_{user_id}'),
        InlineKeyboardButton(text=f'{month_names[month - 1]} {short_year}', callback_data='ignore'),
        InlineKeyboardButton(text='>', callback_data=f'next_{year}_{month}_{user_id}')
    ]
    inline_kb.append(header_buttons)
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_day_buttons = [InlineKeyboardButton(text=day, callback_data='ignore') for day in week_days]
    inline_kb.append(week_day_buttons)
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                row.append(InlineKeyboardButton(text=' ', callback_data='ignore'))
            else:
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
                row.append(InlineKeyboardButton(text=str(day), callback_data=f'day_{year}_{month}_{day}_{user_id}'))
        inline_kb.append(row)
    
    moscow_tz = pytz.timezone('Europe/Moscow')
    today = datetime.now(moscow_tz)
    today_day = today.day

    today_button = [InlineKeyboardButton(text=f"–°–µ–≥–æ–¥–Ω—è ({today_day})", callback_data=f'day_{year}_{month}_{today_day}_{user_id}')]
    inline_kb.append(today_button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    back_button = [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    inline_kb.append(back_button)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
    markup = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    return markup

def user_change_kb(tg_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user_{tg_id}"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f"change_username_{tg_id}")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_users"),
            InlineKeyboardButton(text="–†–µ—Å—Ç–∞—Ä—Ç", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def edit_messages_kb(tg_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data=f"delete_all_messages_{tg_id}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_message")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_users"),
            InlineKeyboardButton(text="–†–µ—Å—Ç–∞—Ä—Ç", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def all_good(tg_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í—Å—ë —Ö–æ—Ä–æ—à–æ", callback_data=f"all_good_{tg_id}")
        ]
    ])
    return keyboard