import sqlite3
import os
import zipfile
from io import BytesIO
from datetime import datetime, timedelta
import pytz

moscow_tz = pytz.timezone('Europe/Moscow')
moscow_time = datetime.now(moscow_tz)

def execute_query(query, params=()):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute(query, params)
    conn.commit()
    result = cursor.fetchall()
    conn.close()
    return result

def answer(field_name):
    if field_name not in ['start', 'q1', 'q2', 'q3', 'q4', 'q5', 'thx', 'n1',  'n2', 'n3', 'empty']:
        raise ValueError(f"–ü–æ–ª–µ '{field_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ answers.")
    query = f"SELECT {field_name} FROM answers LIMIT 1"
    result = execute_query(query)
    if result:
        return result[0][0]
    else:
        return None

def write_answer(field_name, new_value):
    if field_name not in ['start', 'q1', 'q2', 'q3', 'q4', 'q5', 'thx', 'n1',  'n2', 'n3', 'empty']:
        raise ValueError(f"–ü–æ–ª–µ '{field_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ answers.")
    existing_record = execute_query("SELECT COUNT(*) FROM answers")
    if existing_record[0][0] == 0:
        execute_query("INSERT INTO answers (start, q1, q2, q3, q4, q5, thx, n1,  n2, n3, 'empty') VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", ('', '', '', '', '', '', '', '', '', '', ''))  # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
    query = f"UPDATE answers SET {field_name} = ?"
    execute_query(query, (new_value,))
    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ '{field_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_value}'.")

def format_answer(field_name, username):
    message_template = answer(field_name)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã
    if message_template:
        return message_template.format(username=username)  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return None

def add_new_column_to_answers(column_name):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    try:
        cursor.execute(f"ALTER TABLE answers ADD COLUMN {column_name} TEXT")
        conn.commit()
        print(f"–ü–æ–ª–µ '{column_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É 'answers'.")
    except sqlite3.OperationalError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è '{column_name}': {e}")
    finally:
        conn.close()

def add_user_if_not_exists(tg_id, username, tg_username):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM users WHERE tg_id = ?", (tg_id,))
    user_exists = cursor.fetchone()[0]

    if user_exists == 0:
        cursor.execute("INSERT INTO users (tg_id, username, answer, tg_username) VALUES (?, ?, ?, ?)", (tg_id, username, '', tg_username))
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {tg_id} –∏ –∏–º–µ–Ω–µ–º {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    conn.close()

def add_answer_to_user(tg_id, question, answer_text):
    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz)

    if question == 24:
        answer_text = f'—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
        question = 'üîî'
    else:
        try:
            date = datetime.strptime(question, '%Y-%m-%d %H:%M:%S%z')
            date = date.astimezone(moscow_tz)
            answer_text = f'—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {date.strftime("%d.%m.%Y %H:%M")} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
            question = 'üîî'
        except ValueError:
            pass
    
    add_message(tg_id, question, answer_text)
    
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT answer FROM users WHERE tg_id = ?", (tg_id,))
    user_answer = cursor.fetchone()

    if user_answer is not None:
        existing_answer = user_answer[0] if user_answer[0] else ''
        updated_answer = existing_answer + f"{now.strftime('%d.%m.%Y %H:%M')}\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer_text}\n\n"
        cursor.execute("UPDATE users SET answer = ? WHERE tg_id = ?", (updated_answer, tg_id))
        conn.commit()
        print(f"–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å tg_id {tg_id}.")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    conn.close()


def add_admin(tg_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM administrators WHERE tg_id = ?", (tg_id,))
    admin_exists = cursor.fetchone()[0]

    if admin_exists == 0:
        cursor.execute("INSERT INTO administrators (tg_id) VALUES (?)", (tg_id,))
        conn.commit()
        print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å tg_id {tg_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å tg_id {tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    conn.close()

def is_admin(tg_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM administrators WHERE tg_id = ?", (tg_id,))
    admin_exists = cursor.fetchone()[0]
    
    conn.close()
    return admin_exists > 0

def add_admin_if_password_correct(tg_id, password):
    """–î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π"""
    correct_password = "123"  # –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if password == correct_password:
        add_admin(tg_id)
        return True
    return False

def users():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, tg_id, username, tg_username FROM users")
    all_users = cursor.fetchall()
    formatted_users = [{"id": user_id, "tg_id": tg_id, "username": username, "tg_username": tg_username} for user_id, tg_id, username, tg_username in all_users]
    conn.close()
    
    return formatted_users

def format_texts(text_fields):
    formatted_texts = []
    for field in text_fields:
        text = answer(field)
        formatted_texts.append(f"**{field}**: {text}\n-------")
    return "\n".join(formatted_texts)

def format_users_page(users_list, page, max_chars=3000):
    total_chars = 0
    users_on_page = []
    for user in users_list:
        user_str = f"{user}\n"
        if total_chars + len(user_str) <= max_chars:
            users_on_page.append(user_str)
            total_chars += len(user_str)
        else:
            break
    return "".join(users_on_page), len(users_list) - len(users_on_page)

def get_user_answers(tg_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT id, question, text, data FROM messages WHERE tg_id = ?", (tg_id,))
    results = cursor.fetchall()
    conn.close()

    if results:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        answers = [{"id": result[0], "question": result[1], "text": result[2], "data": result[3]} for result in results]
        return answers
    else:
        return None

def create_zip_for_users():
    users_list = users()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    zip_buffer = BytesIO()

    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
        for user in users_list:
            filename = f"{user['username']} (@{user['tg_username']}) [tg_id: {user['tg_id']}].txt"
            content = get_user_answers(user['tg_id'])  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if not content:
                content = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤."
            else:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
                answers_text = ""
                for answer in content:
                    answers_text += (
                        f"ID: {answer['id']}\n"
                        f"–í–æ–ø—Ä–æ—Å: {answer['question']}\n"
                        f"–û—Ç–≤–µ—Ç: {answer['text']}\n"
                        f"–î–∞—Ç–∞: {answer['data']}\n\n"
                    )
                content = answers_text  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
            zip_file.writestr(filename, content)
    
    zip_buffer.seek(0)
    return zip_buffer

def disable_admin_notifications(tg_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE administrators SET notification = FALSE WHERE tg_id = ?", (tg_id,))
    conn.commit()

    conn.close()
    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å tg_id {tg_id} –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

def enable_admin_notifications(tg_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE administrators SET notification = TRUE WHERE tg_id = ?", (tg_id,))
    conn.commit()

    conn.close()
    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å tg_id {tg_id} –≤–∫–ª—é—á–µ–Ω—ã.")

def get_admin_notification_status(tg_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT notification FROM administrators WHERE tg_id = ?", (tg_id,))
    result = cursor.fetchone()
    conn.close()

    if result is not None:
        return result[0]
    else:
        print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

def get_admins_with_notifications_enabled():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT tg_id FROM administrators WHERE notification = TRUE")
    admins = cursor.fetchall()
    conn.close()
    return [{"tg_id": admin[0]} for admin in admins]

def get_user_data(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT username, tg_username, tg_id FROM users WHERE tg_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    if user:
        return {"username": user[0], "tg_username": user[1], "tg_id": user[2]}
    else:
        return None

def split_message(message: str, max_length: int = 4096):
    return [message[i:i+max_length] for i in range(0, len(message), max_length)]

#add_new_column_to_answers('empty')
#write_answer('start', text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
def delete_user(tg_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('DELETE FROM users WHERE tg_id = ?', (tg_id,))
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
def update_username(tg_id, new_username):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username
    cursor.execute('UPDATE users SET username = ? WHERE tg_id = ?', (new_username, tg_id))
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É messages
def add_message(tg_id, question, text):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    
    now = moscow_time
    data = now.strftime('%Y-%m-%d %H:%M:%S')
    
    # –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É messages
    cursor.execute('''
    INSERT INTO messages (tg_id, question, text, data)
    VALUES (?, ?, ?, ?)
    ''', (tg_id, question, text, data))
    
    conn.commit()
    conn.close()

def delete_messages_by_tg_id(tg_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º tg_id
    cursor.execute('DELETE FROM messages WHERE tg_id = ?', (tg_id,))
    
    conn.commit()
    conn.close()

def delete_message_by_id(message_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º id
    cursor.execute('DELETE FROM messages WHERE id = ?', (message_id,))
    
    conn.commit()
    conn.close()

def user_exists(tg_id):
    all_users = users()
    return any(user['tg_id'] == tg_id for user in all_users)